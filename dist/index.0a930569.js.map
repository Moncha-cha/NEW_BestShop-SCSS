{"mappings":"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","sources":["JS/app.js"],"sourcesContent":["function Calculator(form, summary) {  // sem zabalim vsechno, co chci udelat\r\n    this.prices = {                     // tohle je objekt, kde si ulozim ceny\r\n        products: 0.5,\r\n        orders: 0.25,\r\n        package: {   // tohle je objekt, kde je dalsi vyber\r\n            basic: 0,\r\n            professional: 25,\r\n            premium: 60\r\n        },\r\n        accounting: 35,\r\n        terminal: 5\r\n    };\r\n\r\n    this.form = {  // tohle je objekt, kde si ulozim promenne, ktere chci pouzivat\r\n        products: form.querySelector(\"#products\"), // pokud by nebylo data-id, tak by se dalo takto: form.querySelector('input[name=\"products\"]')\r\n        orders: form.querySelector(\"#orders\"),\r\n        package: form.querySelector(\"#package\"),\r\n        accounting: form.querySelector(\"#accounting\"),\r\n        terminal: form.querySelector(\"#terminal\")\r\n    };\r\n\r\n    this.summary = { // tohle je objekt, kde si ulozim promenne, ktere chci pouzivat\r\n        list: summary.querySelector(\"ul\"), // tohle je seznam\r\n        items: summary.querySelector(\"ul\").children, // polozky v seznamu\r\n        total: {\r\n            container: summary.querySelector(\"#total-price\"),       // tohle je container, kde se bude zobrazovat cena\r\n            price: summary.querySelector(\".total__price\")         // tohle je cena\r\n        }\r\n    };\r\n\r\n};\r\n\r\n\r\n/* Vytvoříme metodu, která bude zpracovávat změny v polích pro zadání hodnot. Tato metoda se bude nazývat inputEvent. */\r\n\r\nCalculator.prototype.inputEvent = function (e) { // tohle je metoda, ktera se bude volat, kdyz se zmeni hodnota inputu\r\n    const id = e.currentTarget.id // tohle je id inputu, ktery se zmenil\r\n    const value = e.currentTarget.value // tohle je hodnota inputu, ktery se zmenil\r\n\r\n    const singlePrice = this.prices[id] // tohle je cena za jednu vec\r\n    const totalPrice = singlePrice * value // tohle je vypocet celkove ceny\r\n};\r\n\r\n\r\n/* Vytvoříme metodu, která bude aktualizovat souhrn. Tato metoda se bude nazývat updateSummary. */\r\n\r\nCalculator.prototype.updateSummary = function (id, calc, total, callback) { // tohle je metoda, ktera aktualizuje souhrny\r\n    const summary = this.summary.list.querySelector(`[data-id=\"${id}\"]`) // Tento kód hledá v elementu this.summary.list první podřízený element, který má atribut data-id rovnající se hodnotě proměnné id.\r\n    const summaryCalc = summary.querySelector(\"item__calc\") // summaryCalc bude odkazovat na první element <div class=\"item__calc\">Calculation 1</div> uvnitř elementu summary.\r\n    const summaryTotal = summary.querySelector(\".item__price\") // summaryTotal bude odkazovat na první element <div class=\"item__total\">Total 1</div> uvnitř elementu summary.\r\n};\r\n\r\nsummary.classList.add(\"open\") // prida tridu, ktera zobrazi soucet\r\n\r\n//prvky, ktere jsme vyhledali pomoci updateSummary, aktualizujeme jejich textovou hodnotu:\r\n\r\nif (summaryCalc !== null) { // pokud summaryCalc neni null, tak se zobrazi\r\n    summaryCalc.innerText = calc // tohle je cena mezivysledku\r\n}\r\n\r\nsummaryTotal.innerText = \"$\" + total // tohle je cena s dolarem\r\n\r\nif (typeof callback === \"function\") { // pokud je callback funkce, tak ji zavolame\r\n    callback(summary, summaryCalc, summaryTotal) // zavolame callback\r\n};\r\n\r\nthis.updateSummary(id, value + \" * $\" + singlePrice, totalPrice, function (item, calc, total) { /*  předáme odpovídající hodnoty: id- id pole / value + \" * $\" + singlePrice- / řetězec, připravený k zobrazení v poli výpočtu / totalPrice- konečná cena\r\n                                                                                                function (item, calc, total)- při aktualizaci chceme provést několik dalších akcí, proto poskytujeme další funkci */\r\n    /* Musíme potvrdit:\r\n   pokud zadaná hodnota není menší než 0. Pokud ano, zadáme příslušnou zprávu\r\n   pokud pole není prázdné. Pokud ano, skryjeme ji odebráním opentřídy */\r\n\r\n    if (value < 0) {\r\n        calc.innerHTML = null;\r\n        total.innerText = \"Please enter a positive number\";\r\n    }\r\n    if (value.length === 0) {\r\n        item.classList.remove(\"open\");\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* ROLETKA zpracování vlastního výběru. Tato metoda se bude nazývat selectEvent. Na samém začátku nastavíme toggletřídu open \r\nna hlavní prvek select, který jsme našli dříve a máme uložený v this.form.packageklíči. \r\nKaždé kliknutí tedy otevře nebo zavře výběrové pole.*/\r\n\r\nCalculator.prototype.selectEvent = function (e) {\r\n    this.form.package.classList.toggle(\"open\"); // tohle je toggle, ktery zobrazi nebo skryje vyber\r\n}\r\n\r\n/* Protože je toto pole nestandardní, musíme k extrakci hodnot, které nás zajímají, použít nestandardní metody.\r\nV tomto případě používáme, e.targetprotože nás zajímá, na co jsme přesně klikli a ne co spustilo naši funkci (bublání události). \r\nProto zkontrolujeme, zda hodnota in datasetnašeho prvku není undefined. Pokud takový dataset existuje, znamená to,\r\nže jsme klikli na konkrétní liz našeho selektoru a můžeme s ním něco dále dělat.\r\nExtrahujeme hodnotu a text:*/\r\n\r\nconst value = typeof e.target.dataset.value !== \"undefined\" ? e.target.dataset.value : \"\"; // znamena to ze se kliklo na konkretni polozku a zobrazi se jeji hodnota, pokud ne, zobrazi se prazdny retezec\r\nconst text = typeof e.target.dataset.value !== \"undefined\" ? e.target.innerText : \"Choose package\"; // znamena to ze se kliklo na konkretni polozku a zobrazi se jeji text, pokud ne, zobrazi se \"Choose package\"\r\n\r\n// Poté přidejte podmínku pro kontrolu, zda je délka hodnoty větší než 0.\r\n\r\nif (value.length > 0) { // pokud je hodnota vetsi nez 0, tak se zobrazi\r\n    this.form.package.dataset.value = value; // tohle je hodnota\r\n    this.form.package.querySelector(\".select__input\").innerText = text; // tohle je text\r\n\r\n    this.updateSummary(\"package\", text, this.prices.package[value]); // tohle je aktualizace souhrnu\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* ZASKRTAVACI POLICKA. Tato metoda se bude nazývat checkboxEvent. */\r\n\r\nCalculator.prototype.checkboxEvent = function (e) {\r\n    const checkbox = e.currentTarget;   // tohle je checkbox, ktery se zmenil\r\n    const id = checkbox.id;             // tohle je id checkboxu, ktery se zmenil\r\n    const checked = checkbox.checked;   // tohle je hodnota checkboxu, ktery se zmenil\r\n\r\n\r\n    /* Poté přidejte podmínku, která zkontroluje, zda je checkbox zaškrtnutý. \r\n    Pokud ano, zavoláme metodu updateSummary s parametry id, text a cenu. */\r\n\r\n    this.updateSummary(id, undefined, this.prices[id], function (item) {\r\n        if (!checked) {\r\n            item.classList.remove(\"open\");\r\n        }\r\n    });\r\n};\r\n\r\n\r\n/* Nyní přidejte posluchače událostí pro všechny pole formuláře. */\r\n// NASLOUCHACI UDALOSTI\r\n\r\nCalculator.prototype.addEvents = function () {   /* Jaké události chceme propojit? Ukazuje se, že pro každý prvek budou dva:\r\n                                                    keyup- reagovat na zápis do prvku po každém kliknutí\r\n                                            change- reagovat na změnu hodnoty pomocí šipek, které se objeví v poli (protože jeho typ je number) */\r\n    this.form.products.addEventListener(\"change\", this.inputEvent.bind(this)); // tohle je udalost, ktera se zavola, kdyz se zmeni hodnota inputu\r\n    this.form.products.addEventListener(\"keyup\", this.inputEvent.bind(this));\r\n\r\n    this.form.orders.addEventListener(\"change\", this.inputEvent.bind(this));\r\n    this.form.orders.addEventListener(\"keyup\", this.inputEvent.bind(this));\r\n\r\n    /* vyber */\r\n\r\n    this.form.package.addEventListener(\"click\", this.selectEvent.bind(this)); // tohle je udalost, ktera se zavola, kdyz se klikne na vyber\r\n\r\n    /* checkbox */\r\n\r\n    this.form.accounting.addEventListener(\"change\", this.checkboxEvent.bind(this)); // tohle je udalost, ktera se zavola, kdyz se zmeni hodnota checkboxu\r\n    this.form.terminal.addEventListener(\"change\", this.checkboxEvent.bind(this));\r\n\r\n    /*spustit addEvents */\r\n\r\n    this.addEvents(); // tohle spusti udalosti\r\n\r\n\r\n    /* metodu, která aktualizuje a spočítá součet celé kalkulačky. Tato metoda se bude nazývat updateTotal. */\r\n\r\n    Calculator.prototype.updateTotal = function () {\r\n        const show = this.summary.list.querySelectorAll(\".open\").length > 0; // tohle je zobrazeni souctu\r\n\r\n        if (show) { // pokud je zobrazeni, tak se zobrazi\r\n            /* prvek je zobrazen, musíme se postarat o řadu výpočtů. Vytáhneme každý prvek formuláře jeden po druhém: */\r\n\r\n            const productSum = this.form.products.value < 0 ? 0 : this.form.products.value * this.prices.products; // tohle je soucet produktu\r\n            const ordersSum = this.form.orders.value < 0 ? 0 : this.form.orders.value * this.prices.orders; // tohle je soucet objednavek\r\n            const packagePrice = this.form.package.dataset.value.length === 0 ? 0 : this.prices.package[this.form.package.dataset.value]; // tohle je cena balicku    \r\n            const accounting = this.form.accounting.checked ? this.prices.accounting : 0; // cena za accounting\r\n            const terminal = this.form.terminal.checked ? this.prices.terminal : 0; // cena za terminal\r\n\r\n            // zadat soucet vsech cen do daneho prvku:\r\n\r\n        this.summary.total.price.innerText = \"$\" + (productSum + ordersSum + packagePrice + accounting + terminal); // tohle je celkovy soucet\r\n\r\n\r\n            this.summary.total.container.classList.add(\"open\"); // tohle je zobrazeni\r\n\r\n        } else {\r\n            this.summary.total.container.classList.remove(\"open\"); // tohle je skryti\r\n        }\r\n    };\r\n\r\n}\r\n\r\n\r\n"],"names":[],"version":3,"file":"index.0a930569.js.map","sourceRoot":"/__parcel_source_root/"}